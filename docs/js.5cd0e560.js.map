{"version":3,"sources":["js/index.js"],"names":["document","documentElement","style","setProperty","board","querySelector","boardColumnsCount","parseInt","getPropertyValue","boardRowsCount","numberColors","generateBombs","bombsCount","cellsCount","bombs","random","Math","floor","i","number","includes","push","isBomb","square","type","getAttribute","getBombsAround","cellX","cellY","indexesAround","reduce","totalY","currentY","totalX","currentX","x","y","element","bomb","lose","pointerEvents","filter","alert","discover","status","setAttribute","bombsAround","textContent","toString","color","console","group","forEach","indexY","indexX","query","groupEnd","toggleMark","flag","createElement","flagImg","appendChild","innerHTML","populateBoard","cellIndex","classList","add","addEventListener","event","preventDefault"],"mappings":";;;AAqKa,aArKb,IAAA,EAAA,EAAA,QAAA,2BAqKa,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAnKbA,SAASC,gBAAgBC,MAAMC,YAAY,wBAAyB,MACpEH,SAASC,gBAAgBC,MAAMC,YAAY,qBAAsB,MAEjE,IAAMC,EAAQJ,SAASK,cAAc,UAC/BC,EAAoBC,SACtBP,SAASC,gBAAgBC,MAAMM,iBAAiB,0BAE9CC,EAAiBF,SACnBP,SAASC,gBAAgBC,MAAMM,iBAAiB,uBAG9CE,EAAe,CACjB,wBACA,wBACA,wBACA,wBACA,uBACA,uBACA,wBACA,yBAGEC,EAAgB,SAACC,EAAYC,GAK1B,IAJCC,IAAAA,EAAQ,GAERC,EAAS,WAAMC,OAAAA,KAAKC,MAAMD,KAAKD,SAAWF,IAEvCK,EAAI,EAAGA,EAAIN,EAAYM,IAAK,CAE1BJ,IADHK,IAAAA,EAASJ,IACND,EAAMM,SAASD,IAClBA,EAASJ,IAEbD,EAAMO,KAAKF,GAGRL,OAAAA,GAGLQ,EAAS,SAACC,GAELC,MAAS,SADHD,EAAOE,aAAa,cAI/BC,EAAiB,SAACH,GACdI,IAAAA,EAAQpB,SAASgB,EAAOE,aAAa,WACrCG,EAAQrB,SAASgB,EAAOE,aAAa,WAGrCI,EAAgB,EAAE,EAAG,EAAG,GAEvBA,OAAAA,EAAcC,OAAO,SAACC,EAAQC,GAE7BD,OAAAA,EACAF,EAAcC,OAAO,SAACG,EAAQC,GACpBC,IAAAA,EAAIR,EAAQO,EACZE,EAAIR,EAAQI,EAEZK,EAAUjC,EAAMC,cACQ8B,0BAAAA,OAAAA,EAAeC,eAAAA,OAAAA,EAD7C,OAIOE,OADMD,GAAWf,EAAOe,GACjBJ,EAAS,EAAIA,GAC5B,IAER,IAGDM,EAAO,WACTnC,EAAMF,MAAMsC,cAAgB,OAC5BpC,EAAMF,MAAMuC,OAAS,kBACrBC,MAAM,2CAGJC,EAAW,SAAXA,EAAYpB,GAEVqB,GAAW,WADArB,EAAOE,aAAa,eAC/BmB,CAIDtB,GAFHC,EAAOsB,aAAa,cAAe,cAEhCvB,EAAOC,GACCgB,OAAAA,IAGLO,IAAAA,EAAcpB,EAAeH,GAC/BuB,GAAgB,IAAhBA,EAGA,OAFAvB,EAAOwB,YAAcD,EAAYE,gBACjCzB,EAAOrB,MAAM+C,MAAQvC,EAAaoC,EAAc,IAI9CjB,IAAAA,EAAgB,EAAE,EAAG,EAAG,GAC9BqB,QAAQC,QACRtB,EAAcuB,QAAQ,SAACC,GACnBxB,EAAcuB,QAAQ,SAACE,GACbnB,IAAAA,EAAI5B,SAASgB,EAAOE,aAAa,WAAa6B,EAC9ClB,EAAI7B,SAASgB,EAAOE,aAAa,WAAa4B,EAE9CE,EAAkCpB,0BAAAA,OAAAA,EAAeC,eAAAA,OAAAA,EAAvD,MACMC,EAAUjC,EAAMC,cAAckD,GAE/BlB,GACDA,IAAYd,GAEhBoB,EAASN,OAGjBa,QAAQM,aAGNC,EAAa,SAAClC,GACVqB,IAAAA,EAASrB,EAAOE,aAAa,eAC/BmB,GAAW,eAAXA,EAAAA,CAEAA,GAAW,WAAXA,EAAqB,CACrBrB,EAAOsB,aAAa,cAAe,UAE7Ba,IAAAA,EAAO1D,SAAS2D,cAAc,OAKpC,OAJAD,EAAKb,aAAa,MAAOe,EAAzB,cAEArC,EAAOsC,YAAYH,GAKvBnC,EAAOsB,aAAa,cAAe,UACnCtB,EAAOuC,UAAY,KAGjBC,EAAgB,WAIb,IAHCjD,IAAAA,EAAQH,EAAc,GAAIL,EAAoBG,GAEhDuD,EAAY,EACP7B,EAAI,EAAGA,EAAI1B,EAAgB0B,IAC3B,IAAIC,IAAAA,EAAAA,SAAAA,GACL4B,IAEMzC,IAAAA,EAASvB,SAAS2D,cAAc,UAEtCpC,EAAO0C,UAAUC,IAAI,kBAChB/B,EAAIC,GAAK,GAAM,GAAGb,EAAO0C,UAAUC,IAAI,SAE5C3C,EAAOsB,aAAa,YAAa,SACjCtB,EAAOsB,aAAa,cAAe,UACnCtB,EAAOsB,aAAa,SAAaV,GAAAA,OAAAA,IACjCZ,EAAOsB,aAAa,SAAaT,GAAAA,OAAAA,IAE7BtB,EAAMM,SAAS4C,IACfzC,EAAOsB,aAAa,YAAa,QAGrCtB,EAAO4C,iBAAiB,QAAS,WAC7BxB,EAASpB,KAEbA,EAAO4C,iBAAiB,cAAe,SAACC,GACpCA,EAAMC,iBACNZ,EAAWlC,KAGfnB,EAAMyD,YAAYtC,IAzBba,EAAI,EAAGA,EAAI9B,EAAmB8B,IAA9BA,EAAAA,IA8BjB2B","file":"js.5cd0e560.js","sourceRoot":"..\\src","sourcesContent":["import flagImg from \"../assets/svg/icon.svg\" // eslint-disable-line\n\ndocument.documentElement.style.setProperty(\"--board-columns-count\", \"15\")\ndocument.documentElement.style.setProperty(\"--board-rows-count\", \"20\")\n\nconst board = document.querySelector(\".board\")\nconst boardColumnsCount = parseInt(\n    document.documentElement.style.getPropertyValue(\"--board-columns-count\")\n)\nconst boardRowsCount = parseInt(\n    document.documentElement.style.getPropertyValue(\"--board-rows-count\")\n)\n\nconst numberColors = [\n    \"hsl(190deg, 75%, 50%)\",\n    \"hsl(240deg, 75%, 50%)\",\n    \"hsl(290deg, 75%, 50%)\",\n    \"hsl(340deg, 75%, 50%)\",\n    \"hsl(30deg, 75%, 50%)\",\n    \"hsl(80deg, 75%, 50%)\",\n    \"hsl(130deg, 75%, 50%)\",\n    \"hsl(180deg, 75%, 50%)\",\n]\n\nconst generateBombs = (bombsCount, cellsCount) => {\n    const bombs = []\n\n    const random = () => Math.floor(Math.random() * cellsCount)\n\n    for (let i = 0; i < bombsCount; i++) {\n        let number = random()\n        while (bombs.includes(number)) {\n            number = random()\n        }\n        bombs.push(number)\n    }\n\n    return bombs\n}\n\nconst isBomb = (square) => {\n    const type = square.getAttribute(\"data-type\")\n    return type === \"bomb\" ? true : false\n}\n\nconst getBombsAround = (square) => {\n    const cellX = parseInt(square.getAttribute(\"data-x\"))\n    const cellY = parseInt(square.getAttribute(\"data-y\"))\n\n    // amounts to add to the \"cellIndex\" to find the cells around this one.\n    const indexesAround = [-1, 0, 1]\n\n    return indexesAround.reduce((totalY, currentY) => {\n        return (\n            totalY +\n            indexesAround.reduce((totalX, currentX) => {\n                const x = cellX + currentX\n                const y = cellY + currentY\n\n                const element = board.querySelector(\n                    `.board__square[data-x=\"${x}\"][data-y=\"${y}\"]`\n                )\n                const bomb = element && isBomb(element)\n                return bomb ? totalX + 1 : totalX\n            }, 0)\n        )\n    }, 0)\n}\n\nconst lose = () => {\n    board.style.pointerEvents = \"none\"\n    board.style.filter = \"brightness(50%)\"\n    alert(\"You lose ! Reload the page to restart.\")\n}\n\nconst discover = (square) => {\n    const status = square.getAttribute(\"data-status\")\n    if (status !== \"hidden\") return\n\n    square.setAttribute(\"data-status\", \"discovered\")\n\n    if(isBomb(square)) {\n        return lose()\n    }\n\n    const bombsAround = getBombsAround(square)\n    if (bombsAround !== 0) {\n        square.textContent = bombsAround.toString()\n        square.style.color = numberColors[bombsAround - 1]\n        return\n    }\n\n    const indexesAround = [-1, 0, 1]\n    console.group()\n    indexesAround.forEach((indexY) => {\n        indexesAround.forEach((indexX) => {\n            const x = parseInt(square.getAttribute(\"data-x\")) + indexX\n            const y = parseInt(square.getAttribute(\"data-y\")) + indexY\n\n            const query = `.board__square[data-x=\"${x}\"][data-y=\"${y}\"]`\n            const element = board.querySelector(query)\n\n            if (!element) return\n            if (element === square) return\n\n            discover(element)\n        })\n    })\n    console.groupEnd()\n}\n\nconst toggleMark = (square) => {\n    const status = square.getAttribute(\"data-status\")\n    if (status === \"discovered\") return\n\n    if (status === \"hidden\") {\n        square.setAttribute(\"data-status\", \"marked\")\n\n        const flag = document.createElement(\"img\")\n        flag.setAttribute(\"src\", flagImg)\n\n        square.appendChild(flag)\n\n        return\n    }\n\n    square.setAttribute(\"data-status\", \"hidden\")\n    square.innerHTML = \"\"\n}\n\nconst populateBoard = () => {\n    const bombs = generateBombs(30, boardColumnsCount * boardRowsCount)\n\n    let cellIndex = 0\n    for (let x = 0; x < boardRowsCount; x++) {\n        for (let y = 0; y < boardColumnsCount; y++) {\n            cellIndex++\n\n            const square = document.createElement(\"button\")\n\n            square.classList.add(\"board__square\")\n            if ((x + y) % 2 === 0) square.classList.add(\"light\")\n\n            square.setAttribute(\"data-type\", \"grass\")\n            square.setAttribute(\"data-status\", \"hidden\")\n            square.setAttribute(\"data-x\", `${x}`)\n            square.setAttribute(\"data-y\", `${y}`)\n\n            if (bombs.includes(cellIndex)) {\n                square.setAttribute(\"data-type\", \"bomb\")\n            }\n\n            square.addEventListener(\"click\", () => {\n                discover(square)\n            })\n            square.addEventListener(\"contextmenu\", (event) => {\n                event.preventDefault()\n                toggleMark(square)\n            })\n\n            board.appendChild(square)\n        }\n    }\n}\n\npopulateBoard()\n"]}